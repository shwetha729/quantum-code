{"cells":[{"cell_type":"markdown","source":["<div style=\"text-align: center; margin: 50px\">\n","\n","<h1 style=\"text-align: center;\">Qubit by Qubit</h1>\n","<h2 style=\"text-align: center;\">Introduction to Quantum Computing</h1>\n","<h3>Grover's Algorithm</h3>\n","<h3>Lab notebook</h3>\n","\n","</div>"],"metadata":{"nteract":{"transient":{"deleting":false}},"id":"qkcM6wXpSPx5"}},{"cell_type":"code","source":["# [Setup block 1] Imports\n","import qsharp\n","import matplotlib.pyplot as plt\n","import math\n","import numpy as np"],"outputs":[],"execution_count":null,"metadata":{"jupyter":{"source_hidden":false,"outputs_hidden":false},"nteract":{"transient":{"deleting":false}},"id":"F95FhikiSPx7"}},{"cell_type":"code","source":["# [Setup block 2] Expose name of Q# algorithm we will be calling to Python\n","ApplyQuantumSearch: any = None"],"outputs":[],"execution_count":null,"metadata":{"jupyter":{"source_hidden":false,"outputs_hidden":false},"nteract":{"transient":{"deleting":false}},"id":"g6MoUM1FSPx8"}},{"cell_type":"code","source":["%%qsharp\n","// [Setup block 3] Grover's Algorithm\n","open Microsoft.Quantum.Measurement;\n","open Microsoft.Quantum.Arrays;\n","open Microsoft.Quantum.Convert;\n","open Microsoft.Quantum.Oracles;\n","open Microsoft.Quantum.AmplitudeAmplification;\n","\n","\n","operation ApplyDatabaseOracle(\n","    markedElement : Int,\n","    markedQubit: Qubit,\n","    databaseRegister: Qubit[]\n",") : Unit is Adj + Ctl {\n","    ControlledOnInt(markedElement, X)(databaseRegister, markedQubit);\n","\n","}\n","\n","operation PrepareDatabaseRegister(\n","    markedElement : Int,\n","    idxMarkedQubit: Int,\n","    startQubits: Qubit[]\n",") : Unit is Adj + Ctl {\n","    let flagQubit = startQubits[idxMarkedQubit];\n","    let databaseRegister = Exclude([idxMarkedQubit], startQubits);\n","\n","    // Apply ùëà.\n","    ApplyToEachCA(H, databaseRegister);\n","\n","    // Apply ùê∑.\n","    ApplyDatabaseOracle(markedElement, flagQubit, databaseRegister);\n","}\n","\n","\n","function GroverStatePrepOracle(markedElement : Int) : StateOracle {\n","    return StateOracle(PrepareDatabaseRegister(markedElement, _, _));\n","}\n","\n","\n","function GroverSearch(\n","    markedElement: Int,\n","    nIterations: Int,\n","    idxMarkedQubit: Int\n",") : (Qubit[] => Unit is Adj + Ctl) {\n","\n","    return StandardAmplitudeAmplification(nIterations, GroverStatePrepOracle(markedElement), idxMarkedQubit);\n","\n","}\n","\n","operation ApplyQuantumSearch(nIterations: Int, nDatabaseQubits: Int, markedElement: Int) : (Result, Int) {\n","\n","    use markedQubit = Qubit();\n","    use databaseRegister = Qubit[nDatabaseQubits];\n","\n","    // Implement the quantum search algorithm.\n","    GroverSearch(markedElement, nIterations, 0)([markedQubit] + databaseRegister);\n","\n","    // Measure the marked qubit. On success, this should be One.\n","    let resultSuccess = MResetZ(markedQubit);\n","\n","    // Measure the state of the database register post-selected on\n","    // the state of the marked qubit.\n","    let resultElement = ForEach(MResetZ, databaseRegister);\n","    let numberElement = ResultArrayAsInt(resultElement);\n","\n","    // Returns the measurement results of the algorithm.\n","    return (resultSuccess, numberElement);\n","    \n","}"],"outputs":[],"execution_count":null,"metadata":{"jupyter":{"source_hidden":false,"outputs_hidden":false},"nteract":{"transient":{"deleting":false}},"microsoft":{"language":"qsharp"},"id":"qjCkY0VaSPx8"}},{"cell_type":"markdown","source":["## Linear Search\n","\n","Linear search is a classical algorithm for searching through an unstructured (unsorted) dataset. As described in the lecture, in linear search, we look at each element in the dataset one-by-one until we find the element we are looking for. In the challenges below, you will implement a linear search algorithm and analyze its complexity."],"metadata":{"nteract":{"transient":{"deleting":false}},"id":"io41FLBNSPx8"}},{"cell_type":"code","source":["# Challenge 1 - Implement a linear search algorithm to find \"Choice 13\" in the list of choices given below. \n","# Print the position (index) in the list at which \"Choice 13\" was found.\n","\n","# Steps:\n","# (1) Use a loop to step through list_numbers, and compare each element with what you are searching for\n","#   (2) If the element does not match, move to the next element\n","#   (3) If it matches, the search is over\n","\n","list_choices = [\"Choice 0\", \"Choice 1\", \"Choice 2\",\"Choice 3\",\"Choice 4\",\"Choice 5\",\"Choice 6\",\"Choice 7\",\"Choice 8\",\"Choice 9\",\"Choice 10\",\"Choice 11\",\"Choice 12\",\"Choice 13\",\"Choice 14\",\"Choice 15\"]\n","\n","ind = 0\n","for choice in list_choices: # This is the \"loop\" from step (1)\n","    ind += 1\n","    if choice == \"Choice 13\":\n","        print(\"Choice 13 has been found. It was found at position\", ind)\n","        break"],"outputs":[{"output_type":"stream","name":"stdout","text":"Choice 13 has been found. It was found at position 14\n"}],"execution_count":null,"metadata":{"jupyter":{"source_hidden":false,"outputs_hidden":false},"nteract":{"transient":{"deleting":false}},"id":"Ej2bXt6VSPx9","outputId":"674cc62f-26aa-4f80-c9f6-31b59fb29e64"}},{"cell_type":"markdown","source":["## Number of queries"],"metadata":{"nteract":{"transient":{"deleting":false}},"id":"DcZnUlGHSPx9"}},{"cell_type":"code","source":["# Challenge 2 - Use your implementation of linear search to find out how many queries (search or comparison operations) it took to \n","# find the Choice 13 in this list.\n","print(ind)"],"outputs":[],"execution_count":null,"metadata":{"jupyter":{"source_hidden":false,"outputs_hidden":false},"nteract":{"transient":{"deleting":false}},"id":"MacS-dnZSPx-"}},{"cell_type":"markdown","source":["## Big-O notation\n","\n","The number of queries it takes to find the location of the search item in a dataset captures the complexity of the search algorithm. In general, the complexity of an algorithm is related to the number of operations it takes to execute it, for an input of size ùëÅ.\n","\n","The Big-O notation is used to express the computational complexity of algorithms. It is the worst-case number of operations required by the algorithm.\n","\n","What is the worst case for linear search? How many queries would be required in this case?\n","\n","**Answer**: Linear search has a complexity of  ùëÇ(ùëÅ) , meaning that in the worst case,  ùëÅ  queries are required for an input dataset of size  ùëÅ . This is why this search technique is called linear search! Do you know any other search algorithms and their complexities?"],"metadata":{"nteract":{"transient":{"deleting":false}},"id":"l9GXhofKSPx-"}},{"cell_type":"markdown","source":["## Grover search\n","Now, we will try to find Choice 13 using Grover's search algorithm. The code below uses Qiskit's built-in Grover class to implement Grover's search algorithm."],"metadata":{"nteract":{"transient":{"deleting":false}},"id":"MCG07h3lSPx-"}},{"cell_type":"code","source":["n_choices= 16 # The total number of choices available\n","correct = 13 # The choice number we are searching for\n","\n","# Solve grover problem. Note that we use the simulate() function rather than the execute() function. This does the same thing except that is\n","# simulates the algorithm on one of Microsoft's classical computers by default\n","success, result = ApplyQuantumSearch.simulate(nIterations=1, nDatabaseQubits=math.log(n_choices, 2), markedElement=correct)\n","\n","print('Success! Choice', correct, \"has been found\" if success else 'Failure!')\n","print('It was found at position' , result+1)"],"outputs":[{"output_type":"stream","name":"stdout","text":"Success! Choice 13 has been found\nIt was found at position 14\n"}],"execution_count":null,"metadata":{"jupyter":{"source_hidden":false,"outputs_hidden":false},"nteract":{"transient":{"deleting":false}},"id":"vKwdhfQ0SPx-","outputId":"c3b5d9c6-b294-47e1-d7c4-6a4540141ab3"}},{"cell_type":"markdown","source":["## Number of queries for Grover search"],"metadata":{"nteract":{"transient":{"deleting":false}},"id":"Dv3Wli4CSPx-"}},{"cell_type":"code","source":["def optimalIters(numSolutions: int, numChoices: int):\n","    return math.floor(math.pi/4 * math.sqrt(numChoices/numSolutions))\n","\n","print(\"The optimal number of queries is\", optimalIters(1, n_choices))"],"outputs":[{"output_type":"stream","name":"stdout","text":"The optimal number of queries is 3\n"}],"execution_count":null,"metadata":{"jupyter":{"source_hidden":false,"outputs_hidden":false},"nteract":{"transient":{"deleting":false}},"id":"8v6AKVHNSPx-","outputId":"68214ffa-15e4-4715-97a6-349fc113905f"}},{"cell_type":"markdown","source":["Is the optimal number of queries greater than or less than the worst-case number of queries for linear search?\n","\n","Why do you think there is an optimal number of queries for Grover search? What happens if the number of queries is not optimal?\n","\n","**Answer**: As we discussed in the lecture, Grover's algorithm works by amplifying the amplitude of the search item in the dataset and reducing the amplitude of all the other states. The optimal number of queries corresponds to the number of iterations of the algorithms that maximize the probability of measuring the search item. If the number of iterations is lower (or higher), the probability of measuring the search item will be lower too.\n","\n","This optimal number of iterations depends on the size of the dataset, as we will see in a few minutes."],"metadata":{"nteract":{"transient":{"deleting":false}},"id":"mvpVDrt8SPx_"}},{"cell_type":"markdown","source":["## Big-O complexity of Grover's search algorithm"],"metadata":{"nteract":{"transient":{"deleting":false}},"id":"dO1zQ-uySPx_"}},{"cell_type":"markdown","source":["We saw that the complexity of linear search can be expressed as $ùëÇ(ùëÅ)$ . Grover's search has a complexity of $O(\\sqrt{N})$, meaning that the optimal number of queries scale as the square root of the size of the dataset."],"metadata":{"nteract":{"transient":{"deleting":false}},"id":"CGyn0C_sSPx_"}},{"cell_type":"markdown","source":["# Seeing quantum advantage: Plotting number of queries\n","\n","Let's make a plot of the complexities for linear search and Grover search.\n","\n","For linear search, for a database of size $N$, the worst-case number of queries is given by $N$. This occurs in the case that the element you are looking for is the last element in the database.\n","\n","For Grover search, for a database of size $N$, the worst-case number of queries is approximately given by $\\frac{\\pi}{4}\\sqrt{N}$. We won't worry about how this number is calculated for now - let's focus on how this compares with linear search."],"metadata":{"nteract":{"transient":{"deleting":false}},"id":"zFSZoJ4FSPx_"}},{"cell_type":"code","source":["# Challenge 3 - Write code to plot the worst case number of queries for linear and Grover search using the matplotlib library (already imported)\n","# For what size of database does Grover search offer 10 times fewer searches? What about 100 times?\n","N = np.arange(1,1000)\n","plt.semilogy(N,N)\n","plt.semilogy(N,np.pi/4*np.sqrt(N))"],"outputs":[{"output_type":"execute_result","execution_count":34,"data":{"text/plain":"[<matplotlib.lines.Line2D at 0x7ff4588c8970>]"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":null,"metadata":{"jupyter":{"source_hidden":false,"outputs_hidden":false},"nteract":{"transient":{"deleting":false}},"id":"PVLqYWzDSPx_","outputId":"0fa0453b-aff2-4c04-f227-79b1977f5d40"}},{"cell_type":"markdown","source":["# Exploring Grover's algorithm further.\n","\n","Let's see amplitude amplification in action! The code below uses Grover's search algorithm as implemented in the setup block in Q#.\n","\n","Challenge 4 - Increase the number of iterations in the indicated line (it is set to 0 currently). What do you notice? What is the optimal number of iterations in this case?\n","\n","Challenge 5 - Try changing the number of choices in the indicated line to 32. What is the optimal number of queries in this case? What about 128?\n","\n","Grover's algorithm works best when the number of choices is a power of 2."],"metadata":{"nteract":{"transient":{"deleting":false}},"id":"KSB6jSYKSPx_"}},{"cell_type":"code","source":["# This code takes the number of choices and the correct choice, and uses Grover's algorithm to find its location.\n","\n","# Challenge 4 - Increase the number of iterations in the indicated line (it is set to 0 currently). \n","# What do you notice in the histogram? What is the optimal number of iterations in this case?\n","\n","# Challenge 5 - Try changing the number of choices in the indicated line to 32. \n","# What is the optimal number of queries in this case? \n","# What about a dataset of size 128?\n","\n","n_choices= 16 # (Change this for challenge 5) Total number of choices - please ensure that this number is a power of 2.\n","correct = 13 # Choice number you are searching for\n","n_queries = 3 # (Change this for challenge 4) The number of iterations/queries \n","\n","success, result = ApplyQuantumSearch.simulate(nIterations=n_queries, nDatabaseQubits=math.log(n_choices, 2), markedElement=correct)\n","print('Success! Choice ' + str(correct) + \" has been found\" if success else 'Failure!')\n","print('It was found at position' , result+1)\n","\n","# Charu note: unsure how to make the histogram for challenge 4\n"],"outputs":[{"output_type":"stream","name":"stdout","text":"Success! Choice 13 has been found\nIt was found at position 14\n"}],"execution_count":null,"metadata":{"jupyter":{"source_hidden":false,"outputs_hidden":false},"nteract":{"transient":{"deleting":false}},"id":"bA8y5i5xSPx_","outputId":"58ff2370-f81d-4131-9a13-5dd8f34b18a3"}}],"metadata":{"kernel_info":{"name":"python3"},"kernelspec":{"name":"python3","language":"python","display_name":"Python 3 (ipykernel)"},"language_info":{"name":"python","version":"3.9.15","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"nteract":{"version":"nteract-front-end@1.0.0"},"microsoft":{"host":{"AzureQuantum":{"sourceType":"SampleGallery","sourceLink":"https://raw.githubusercontent.com/microsoft/Quantum/f7d76cc28219b577404437b993a8fdfdc0dad33e/samples/azure-quantum/grover/Grover.ipynb"}}},"colab":{"provenance":[]}},"nbformat":4,"nbformat_minor":0}